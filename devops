Describe branching strategies you have used.

This question is asked to test your branching experience so tell them about how you have used branching in your previous job and what purpose does it serves, you can refer the below points:

Feature branching
A feature branch model keeps all of the changes for a particular feature inside of a branch. When the feature is fully tested and validated by automated tests, the branch is then merged into master.
Task branching
In this model each task is implemented on its own branch with the task key included in the branch name. It is easy to see which code implements which task, just look for the task key in the branch name.
Release branching
Once the develop branch has acquired enough features for a release, you can clone that branch to form a Release branch. Creating this branch starts the next release cycle, so no new features can be added after this point, only bug fixes, documentation generation, and other release-oriented tasks should go in this branch. Once it is ready to ship, the release gets merged into master and tagged with a version number. In addition, it should be merged back into develop branch, which may have progressed since the release was initiated.
In the end tell them that branching strategies varies from one organization to another, so I know basic branching operations like delete, merge, checking out a branch etc.








OS

1) What is the difference between Linux and Unix ?

2) What's a KVM ?

3) How would you make sure a service starts on an OS of your choice ?

4) Here's a terminal. What flavor of Linux is running ?

5) Write a command to delete all empty file under a directory.

6) Kill all the procs by a particular user without using pkill

7) What is Active Directory ? How do you make a server join a domain ?

Networking
What is the difference between TCP and UDP ?
What is ICMP ? Why should you block it ?
What is IPv6 ? Why should we care ?
In a corporate environment users from London can ping a particular server but users from New York cannot, what steps will you take to troubleshoot the problem ?
What steps are needed to change the hostname on a Linux machine ?
Where is the hostname file on a Windows server ?
How is a hostname resolved on a Linux machine ?
What's a SSL tunnel ?
What's a SDN ?

Scripting (questions here vary on rating and depend pretty much on telling the person to write a short script)
What is your favorite scripting language ? Why ?
What are design patterns ?
Describe some scripts you have written/automation you have done/ programs you have written. Justify your choice of scripting language and design patterns.
Can you port the same script to another language ? On another OS ?
How long would it take you to learn another language ?

CI/CD
How would you trace a binary deployment back to the source code ? How would you structure such a build ?
How do you manage dependencies ?
CI can only be used to find compile time errors quickly. True/False. Explain.
How would you structure CD for an app that depends on 3 other apps ?
How do you plan capacity for your CI/CD servers ?
All your built binaries should be checked in to your git/svn for quick deployment and posteriority. True/False. Explain.

That's all I can think of right now. I will keep updating these as I think of more questions and topics.








1. How does HTTP work?

2. Discuss your experience building bridges between IT Ops, QA and development.

3. What types of testing are needed?

4. Give me an example of how you would handle projects?

5. What’s your career objective in your role as a DevOps engineer?

6. How would you make software deployable?

7. What is the one most important thing DevOps helps do?

8. What’s a PTR in DNS?

9. Describe two-factor authentication?

10. What is an MX record in DNS?

11. What is the difference between RAID 0 and RAID 1?

12. How would you ensure traceability?



Here are some of them which can be useful - 
1. What are some examples of how you might scale a write/read-heavy application? Why?
2. Tell me about the worst-run/best-run outage you’ve been a part of. What made it bad/well-run?
3. How would you assess how “deployable” a system is?
How do you know when a deployment is ready? How would you manage that deployment?
4. How would you prepare for a migration from one platform to another?8
5. What is the purpose of a post-mortem meeting?
Do you know how to learn from mistakes? How do you get the most value out of post-mortems?
6. How would you make key aspects of a software system traceable?
7. How do you handle interruptions?
8. How would you deploy software to 5000 systems?
9. What different types of testing need to be carried out on a software system, and what tools would you use to achieve this testing?
Source - www.upguard.com


One question that we ask at WIX is: "Given only a Telnet terminal: How do you query google for ..."


https://github.com/spikenode/DevOps-Interview-Questions




